/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IMarketplace {
  export type BaseTokenDataStruct = {
    tokenContract: PromiseOrValue<string>;
    tokenName: PromiseOrValue<string>;
    tokenSymbol: PromiseOrValue<string>;
  };

  export type BaseTokenDataStructOutput = [string, string, string] & {
    tokenContract: string;
    tokenName: string;
    tokenSymbol: string;
  };
}

export interface TokenRegistryInterface extends utils.Interface {
  functions: {
    "TOKEN_CONTRACT()": FunctionFragment;
    "VOUCHER_TOKEN()": FunctionFragment;
    "addProxyPool(string,address)": FunctionFragment;
    "countPools(string)": FunctionFragment;
    "getBaseTokenDataPart(string,uint256,uint256)": FunctionFragment;
    "getImplementation(string)": FunctionFragment;
    "getInjector()": FunctionFragment;
    "getProxyBeacon(string)": FunctionFragment;
    "injectDependenciesToExistingPools(string,uint256,uint256)": FunctionFragment;
    "injectDependenciesToExistingPoolsWithData(string,bytes,uint256,uint256)": FunctionFragment;
    "isTokenContract(address)": FunctionFragment;
    "isVoucherToken(address)": FunctionFragment;
    "listPools(string,uint256,uint256)": FunctionFragment;
    "setDependencies(address,bytes)": FunctionFragment;
    "setInjector(address)": FunctionFragment;
    "setNewImplementations(string[],address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TOKEN_CONTRACT"
      | "VOUCHER_TOKEN"
      | "addProxyPool"
      | "countPools"
      | "getBaseTokenDataPart"
      | "getImplementation"
      | "getInjector"
      | "getProxyBeacon"
      | "injectDependenciesToExistingPools"
      | "injectDependenciesToExistingPoolsWithData"
      | "isTokenContract"
      | "isVoucherToken"
      | "listPools"
      | "setDependencies"
      | "setInjector"
      | "setNewImplementations"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TOKEN_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOUCHER_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProxyPool",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "countPools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenDataPart",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInjector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyBeacon",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "injectDependenciesToExistingPools",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "injectDependenciesToExistingPoolsWithData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoucherToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listPools",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInjector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewImplementations",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "TOKEN_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOUCHER_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProxyPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "countPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenDataPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyBeacon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "injectDependenciesToExistingPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "injectDependenciesToExistingPoolsWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoucherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewImplementations",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TokenRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOKEN_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    VOUCHER_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    addProxyPool(
      poolName_: PromiseOrValue<string>,
      tokenAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    countPools(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBaseTokenDataPart(
      poolName_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.BaseTokenDataStructOutput[]] & {
        baseTokensData_: IMarketplace.BaseTokenDataStructOutput[];
      }
    >;

    getImplementation(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInjector(
      overrides?: CallOverrides
    ): Promise<[string] & { injector_: string }>;

    getProxyBeacon(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    injectDependenciesToExistingPools(
      name_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    injectDependenciesToExistingPoolsWithData(
      name_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTokenContract(
      potentialContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVoucherToken(
      potentialContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listPools(
      name_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools_: string[] }>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewImplementations(
      names_: PromiseOrValue<string>[],
      newImplementations_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  TOKEN_CONTRACT(overrides?: CallOverrides): Promise<string>;

  VOUCHER_TOKEN(overrides?: CallOverrides): Promise<string>;

  addProxyPool(
    poolName_: PromiseOrValue<string>,
    tokenAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  countPools(
    name_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBaseTokenDataPart(
    poolName_: PromiseOrValue<string>,
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.BaseTokenDataStructOutput[]>;

  getImplementation(
    name_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInjector(overrides?: CallOverrides): Promise<string>;

  getProxyBeacon(
    name_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  injectDependenciesToExistingPools(
    name_: PromiseOrValue<string>,
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  injectDependenciesToExistingPoolsWithData(
    name_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTokenContract(
    potentialContract_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVoucherToken(
    potentialContract_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listPools(
    name_: PromiseOrValue<string>,
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  setDependencies(
    contractsRegistry_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInjector(
    injector_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewImplementations(
    names_: PromiseOrValue<string>[],
    newImplementations_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TOKEN_CONTRACT(overrides?: CallOverrides): Promise<string>;

    VOUCHER_TOKEN(overrides?: CallOverrides): Promise<string>;

    addProxyPool(
      poolName_: PromiseOrValue<string>,
      tokenAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    countPools(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokenDataPart(
      poolName_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.BaseTokenDataStructOutput[]>;

    getImplementation(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInjector(overrides?: CallOverrides): Promise<string>;

    getProxyBeacon(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    injectDependenciesToExistingPools(
      name_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    injectDependenciesToExistingPoolsWithData(
      name_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTokenContract(
      potentialContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVoucherToken(
      potentialContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listPools(
      name_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewImplementations(
      names_: PromiseOrValue<string>[],
      newImplementations_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    TOKEN_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    VOUCHER_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    addProxyPool(
      poolName_: PromiseOrValue<string>,
      tokenAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    countPools(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokenDataPart(
      poolName_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImplementation(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInjector(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyBeacon(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    injectDependenciesToExistingPools(
      name_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    injectDependenciesToExistingPoolsWithData(
      name_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTokenContract(
      potentialContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVoucherToken(
      potentialContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listPools(
      name_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewImplementations(
      names_: PromiseOrValue<string>[],
      newImplementations_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKEN_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOUCHER_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addProxyPool(
      poolName_: PromiseOrValue<string>,
      tokenAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    countPools(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokenDataPart(
      poolName_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImplementation(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProxyBeacon(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    injectDependenciesToExistingPools(
      name_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    injectDependenciesToExistingPoolsWithData(
      name_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTokenContract(
      potentialContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVoucherToken(
      potentialContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listPools(
      name_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewImplementations(
      names_: PromiseOrValue<string>[],
      newImplementations_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
