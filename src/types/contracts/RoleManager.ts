/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IRoleManager {
  export type BaseRoleDataStruct = {
    role: PromiseOrValue<BytesLike>;
    roleAdmin: PromiseOrValue<BytesLike>;
    roleName: PromiseOrValue<string>;
  };

  export type BaseRoleDataStructOutput = [string, string, string] & {
    role: string;
    roleAdmin: string;
    roleName: string;
  };

  export type DetailedRoleInfoStruct = {
    baseRoleData: IRoleManager.BaseRoleDataStruct;
    members: PromiseOrValue<string>[];
  };

  export type DetailedRoleInfoStructOutput = [
    IRoleManager.BaseRoleDataStructOutput,
    string[]
  ] & {
    baseRoleData: IRoleManager.BaseRoleDataStructOutput;
    members: string[];
  };
}

export interface RoleManagerInterface extends utils.Interface {
  functions: {
    "ADMINISTRATOR_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MARKETPLACE_MANAGER()": FunctionFragment;
    "ROLE_SUPERVISOR()": FunctionFragment;
    "SIGNATURE_MANAGER()": FunctionFragment;
    "TOKEN_FACTORY_MANAGER()": FunctionFragment;
    "TOKEN_MANAGER()": FunctionFragment;
    "TOKEN_REGISTRY_MANAGER()": FunctionFragment;
    "WITHDRAWAL_MANAGER()": FunctionFragment;
    "__RoleManager_init((bytes32,bytes32,string)[])": FunctionFragment;
    "getAllRolesBaseInfo()": FunctionFragment;
    "getAllRolesDetailedInfo()": FunctionFragment;
    "getAllSupportedRoles()": FunctionFragment;
    "getInjector()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMembers(bytes32)": FunctionFragment;
    "getRoleMembersCount(bytes32)": FunctionFragment;
    "getRolesBaseInfo(bytes32[])": FunctionFragment;
    "getRolesBaseInfoPart(uint256,uint256)": FunctionFragment;
    "getRolesDetailedInfo(bytes32[])": FunctionFragment;
    "getRolesDetailedInfoPart(uint256,uint256)": FunctionFragment;
    "getSupportedRolesCount()": FunctionFragment;
    "getSupportedRolesPart(uint256,uint256)": FunctionFragment;
    "getUserRoles(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "grantRoles(bytes32,address[])": FunctionFragment;
    "grantRolesBatch(bytes32[],address[][])": FunctionFragment;
    "hasAnyRole(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasSpecificRoles(bytes32[],address)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isMarketplaceManager(address)": FunctionFragment;
    "isRoleExists(bytes32)": FunctionFragment;
    "isRoleSupervisor(address)": FunctionFragment;
    "isSignatureManager(address)": FunctionFragment;
    "isTokenFactoryManager(address)": FunctionFragment;
    "isTokenManager(address)": FunctionFragment;
    "isTokenRegistryManager(address)": FunctionFragment;
    "isWithdrawalManager(address)": FunctionFragment;
    "removeRoles(bytes32[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "revokeRoles(bytes32,address[])": FunctionFragment;
    "revokeRolesBatch(bytes32[],address[][])": FunctionFragment;
    "setDependencies(address,bytes)": FunctionFragment;
    "setInjector(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateRolesParams((bytes32,bytes32,string)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMINISTRATOR_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MARKETPLACE_MANAGER"
      | "ROLE_SUPERVISOR"
      | "SIGNATURE_MANAGER"
      | "TOKEN_FACTORY_MANAGER"
      | "TOKEN_MANAGER"
      | "TOKEN_REGISTRY_MANAGER"
      | "WITHDRAWAL_MANAGER"
      | "__RoleManager_init"
      | "getAllRolesBaseInfo"
      | "getAllRolesDetailedInfo"
      | "getAllSupportedRoles"
      | "getInjector"
      | "getRoleAdmin"
      | "getRoleMembers"
      | "getRoleMembersCount"
      | "getRolesBaseInfo"
      | "getRolesBaseInfoPart"
      | "getRolesDetailedInfo"
      | "getRolesDetailedInfoPart"
      | "getSupportedRolesCount"
      | "getSupportedRolesPart"
      | "getUserRoles"
      | "grantRole"
      | "grantRoles"
      | "grantRolesBatch"
      | "hasAnyRole"
      | "hasRole"
      | "hasSpecificRoles"
      | "isAdmin"
      | "isMarketplaceManager"
      | "isRoleExists"
      | "isRoleSupervisor"
      | "isSignatureManager"
      | "isTokenFactoryManager"
      | "isTokenManager"
      | "isTokenRegistryManager"
      | "isWithdrawalManager"
      | "removeRoles"
      | "renounceRole"
      | "revokeRole"
      | "revokeRoles"
      | "revokeRolesBatch"
      | "setDependencies"
      | "setInjector"
      | "supportsInterface"
      | "updateRolesParams"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMINISTRATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKETPLACE_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_SUPERVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_FACTORY_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_REGISTRY_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__RoleManager_init",
    values: [IRoleManager.BaseRoleDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRolesBaseInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRolesDetailedInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSupportedRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInjector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMembers",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMembersCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolesBaseInfo",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolesBaseInfoPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolesDetailedInfo",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolesDetailedInfoPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedRolesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedRolesPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRolesBatch",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnyRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSpecificRoles",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketplaceManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoleExists",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoleSupervisor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSignatureManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenFactoryManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenRegistryManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawalManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoles",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRolesBatch",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInjector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRolesParams",
    values: [IRoleManager.BaseRoleDataStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADMINISTRATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKETPLACE_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_SUPERVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_FACTORY_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_REGISTRY_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__RoleManager_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRolesBaseInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRolesDetailedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSupportedRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMembersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolesBaseInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolesBaseInfoPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolesDetailedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolesDetailedInfoPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedRolesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedRolesPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantRolesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAnyRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSpecificRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMarketplaceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRoleExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRoleSupervisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSignatureManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenFactoryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenRegistryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawalManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRolesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRolesParams",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RoleManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoleManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMINISTRATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MARKETPLACE_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<[string]>;

    SIGNATURE_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_FACTORY_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_REGISTRY_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAWAL_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    __RoleManager_init(
      rolesInitData_: IRoleManager.BaseRoleDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllRolesBaseInfo(
      overrides?: CallOverrides
    ): Promise<[IRoleManager.BaseRoleDataStructOutput[]]>;

    getAllRolesDetailedInfo(
      overrides?: CallOverrides
    ): Promise<[IRoleManager.DetailedRoleInfoStructOutput[]]>;

    getAllSupportedRoles(overrides?: CallOverrides): Promise<[string[]]>;

    getInjector(
      overrides?: CallOverrides
    ): Promise<[string] & { injector_: string }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMembers(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRoleMembersCount(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRolesBaseInfo(
      roles_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [IRoleManager.BaseRoleDataStructOutput[]] & {
        rolesBaseInfo_: IRoleManager.BaseRoleDataStructOutput[];
      }
    >;

    getRolesBaseInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IRoleManager.BaseRoleDataStructOutput[]]>;

    getRolesDetailedInfo(
      roles_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [IRoleManager.DetailedRoleInfoStructOutput[]] & {
        rolesDetailedInfo_: IRoleManager.DetailedRoleInfoStructOutput[];
      }
    >;

    getRolesDetailedInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IRoleManager.DetailedRoleInfoStructOutput[]]>;

    getSupportedRolesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSupportedRolesPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserRoles(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRoles(
      role_: PromiseOrValue<BytesLike>,
      accounts_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRolesBatch(
      roles_: PromiseOrValue<BytesLike>[],
      accounts_: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasAnyRole(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role_: PromiseOrValue<BytesLike>,
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSpecificRoles(
      roles_: PromiseOrValue<BytesLike>[],
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAdmin(
      admin_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketplaceManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRoleExists(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRoleSupervisor(
      supervisor_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSignatureManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenFactoryManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenRegistryManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWithdrawalManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeRoles(
      rolesToRemove_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRoles(
      role_: PromiseOrValue<BytesLike>,
      accounts_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRolesBatch(
      roles_: PromiseOrValue<BytesLike>[],
      accounts_: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateRolesParams(
      rolesData_: IRoleManager.BaseRoleDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADMINISTRATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MARKETPLACE_MANAGER(overrides?: CallOverrides): Promise<string>;

  ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<string>;

  SIGNATURE_MANAGER(overrides?: CallOverrides): Promise<string>;

  TOKEN_FACTORY_MANAGER(overrides?: CallOverrides): Promise<string>;

  TOKEN_MANAGER(overrides?: CallOverrides): Promise<string>;

  TOKEN_REGISTRY_MANAGER(overrides?: CallOverrides): Promise<string>;

  WITHDRAWAL_MANAGER(overrides?: CallOverrides): Promise<string>;

  __RoleManager_init(
    rolesInitData_: IRoleManager.BaseRoleDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllRolesBaseInfo(
    overrides?: CallOverrides
  ): Promise<IRoleManager.BaseRoleDataStructOutput[]>;

  getAllRolesDetailedInfo(
    overrides?: CallOverrides
  ): Promise<IRoleManager.DetailedRoleInfoStructOutput[]>;

  getAllSupportedRoles(overrides?: CallOverrides): Promise<string[]>;

  getInjector(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMembers(
    role_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoleMembersCount(
    role_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRolesBaseInfo(
    roles_: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<IRoleManager.BaseRoleDataStructOutput[]>;

  getRolesBaseInfoPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRoleManager.BaseRoleDataStructOutput[]>;

  getRolesDetailedInfo(
    roles_: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<IRoleManager.DetailedRoleInfoStructOutput[]>;

  getRolesDetailedInfoPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRoleManager.DetailedRoleInfoStructOutput[]>;

  getSupportedRolesCount(overrides?: CallOverrides): Promise<BigNumber>;

  getSupportedRolesPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserRoles(
    userAddr_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRoles(
    role_: PromiseOrValue<BytesLike>,
    accounts_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRolesBatch(
    roles_: PromiseOrValue<BytesLike>[],
    accounts_: PromiseOrValue<string>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasAnyRole(
    account_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role_: PromiseOrValue<BytesLike>,
    account_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSpecificRoles(
    roles_: PromiseOrValue<BytesLike>[],
    account_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAdmin(
    admin_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketplaceManager(
    manager_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRoleExists(
    role_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRoleSupervisor(
    supervisor_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSignatureManager(
    manager_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenFactoryManager(
    manager_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenManager(
    manager_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenRegistryManager(
    manager_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWithdrawalManager(
    manager_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeRoles(
    rolesToRemove_: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRoles(
    role_: PromiseOrValue<BytesLike>,
    accounts_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRolesBatch(
    roles_: PromiseOrValue<BytesLike>[],
    accounts_: PromiseOrValue<string>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDependencies(
    contractsRegistry_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInjector(
    injector_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateRolesParams(
    rolesData_: IRoleManager.BaseRoleDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMINISTRATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MARKETPLACE_MANAGER(overrides?: CallOverrides): Promise<string>;

    ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<string>;

    SIGNATURE_MANAGER(overrides?: CallOverrides): Promise<string>;

    TOKEN_FACTORY_MANAGER(overrides?: CallOverrides): Promise<string>;

    TOKEN_MANAGER(overrides?: CallOverrides): Promise<string>;

    TOKEN_REGISTRY_MANAGER(overrides?: CallOverrides): Promise<string>;

    WITHDRAWAL_MANAGER(overrides?: CallOverrides): Promise<string>;

    __RoleManager_init(
      rolesInitData_: IRoleManager.BaseRoleDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAllRolesBaseInfo(
      overrides?: CallOverrides
    ): Promise<IRoleManager.BaseRoleDataStructOutput[]>;

    getAllRolesDetailedInfo(
      overrides?: CallOverrides
    ): Promise<IRoleManager.DetailedRoleInfoStructOutput[]>;

    getAllSupportedRoles(overrides?: CallOverrides): Promise<string[]>;

    getInjector(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMembers(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoleMembersCount(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolesBaseInfo(
      roles_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<IRoleManager.BaseRoleDataStructOutput[]>;

    getRolesBaseInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRoleManager.BaseRoleDataStructOutput[]>;

    getRolesDetailedInfo(
      roles_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<IRoleManager.DetailedRoleInfoStructOutput[]>;

    getRolesDetailedInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRoleManager.DetailedRoleInfoStructOutput[]>;

    getSupportedRolesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedRolesPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserRoles(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      role_: PromiseOrValue<BytesLike>,
      accounts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    grantRolesBatch(
      roles_: PromiseOrValue<BytesLike>[],
      accounts_: PromiseOrValue<string>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    hasAnyRole(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role_: PromiseOrValue<BytesLike>,
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSpecificRoles(
      roles_: PromiseOrValue<BytesLike>[],
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAdmin(
      admin_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketplaceManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRoleExists(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRoleSupervisor(
      supervisor_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSignatureManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenFactoryManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenRegistryManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWithdrawalManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeRoles(
      rolesToRemove_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      role_: PromiseOrValue<BytesLike>,
      accounts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRolesBatch(
      roles_: PromiseOrValue<BytesLike>[],
      accounts_: PromiseOrValue<string>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateRolesParams(
      rolesData_: IRoleManager.BaseRoleDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    ADMINISTRATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MARKETPLACE_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNATURE_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_FACTORY_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_REGISTRY_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWAL_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    __RoleManager_init(
      rolesInitData_: IRoleManager.BaseRoleDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllRolesBaseInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getAllRolesDetailedInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getAllSupportedRoles(overrides?: CallOverrides): Promise<BigNumber>;

    getInjector(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMembers(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMembersCount(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolesBaseInfo(
      roles_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolesBaseInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolesDetailedInfo(
      roles_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolesDetailedInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedRolesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedRolesPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoles(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRoles(
      role_: PromiseOrValue<BytesLike>,
      accounts_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRolesBatch(
      roles_: PromiseOrValue<BytesLike>[],
      accounts_: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasAnyRole(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role_: PromiseOrValue<BytesLike>,
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSpecificRoles(
      roles_: PromiseOrValue<BytesLike>[],
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(
      admin_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketplaceManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRoleExists(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRoleSupervisor(
      supervisor_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSignatureManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenFactoryManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenRegistryManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWithdrawalManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRoles(
      rolesToRemove_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRoles(
      role_: PromiseOrValue<BytesLike>,
      accounts_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRolesBatch(
      roles_: PromiseOrValue<BytesLike>[],
      accounts_: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateRolesParams(
      rolesData_: IRoleManager.BaseRoleDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMINISTRATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARKETPLACE_MANAGER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIGNATURE_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_FACTORY_MANAGER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_REGISTRY_MANAGER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WITHDRAWAL_MANAGER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __RoleManager_init(
      rolesInitData_: IRoleManager.BaseRoleDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllRolesBaseInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllRolesDetailedInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllSupportedRoles(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMembers(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMembersCount(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRolesBaseInfo(
      roles_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRolesBaseInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRolesDetailedInfo(
      roles_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRolesDetailedInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedRolesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedRolesPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoles(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRoles(
      role_: PromiseOrValue<BytesLike>,
      accounts_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRolesBatch(
      roles_: PromiseOrValue<BytesLike>[],
      accounts_: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasAnyRole(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role_: PromiseOrValue<BytesLike>,
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSpecificRoles(
      roles_: PromiseOrValue<BytesLike>[],
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      admin_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketplaceManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRoleExists(
      role_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRoleSupervisor(
      supervisor_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSignatureManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenFactoryManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenRegistryManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWithdrawalManager(
      manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRoles(
      rolesToRemove_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      role_: PromiseOrValue<BytesLike>,
      accounts_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRolesBatch(
      roles_: PromiseOrValue<BytesLike>[],
      accounts_: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateRolesParams(
      rolesData_: IRoleManager.BaseRoleDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
