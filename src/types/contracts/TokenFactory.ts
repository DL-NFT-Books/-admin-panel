/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TokenFactoryInterface extends utils.Interface {
  functions: {
    "deployToken(string,string)": FunctionFragment;
    "deployVoucher(string,string)": FunctionFragment;
    "getInjector()": FunctionFragment;
    "setDependencies(address,bytes)": FunctionFragment;
    "setInjector(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployToken"
      | "deployVoucher"
      | "getInjector"
      | "setDependencies"
      | "setInjector"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployVoucher",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInjector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInjector",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInjector",
    data: BytesLike
  ): Result;

  events: {
    "TokenDeployed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenDeployed"): EventFragment;
}

export interface TokenDeployedEventObject {
  tokenProxyAddr: string;
}
export type TokenDeployedEvent = TypedEvent<[string], TokenDeployedEventObject>;

export type TokenDeployedEventFilter = TypedEventFilter<TokenDeployedEvent>;

export interface TokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployVoucher(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getInjector(
      overrides?: CallOverrides
    ): Promise<[string] & { injector_: string }>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deployToken(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployVoucher(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getInjector(overrides?: CallOverrides): Promise<string>;

  setDependencies(
    contractsRegistry_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInjector(
    injector_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployVoucher(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInjector(overrides?: CallOverrides): Promise<string>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TokenDeployed(address)"(
      tokenProxyAddr?: PromiseOrValue<string> | null
    ): TokenDeployedEventFilter;
    TokenDeployed(
      tokenProxyAddr?: PromiseOrValue<string> | null
    ): TokenDeployedEventFilter;
  };

  estimateGas: {
    deployToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployVoucher(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getInjector(overrides?: CallOverrides): Promise<BigNumber>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployVoucher(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
